<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>心灵绿洲 - 心理减压小游戏</title>
    <style>
        ▪ {

            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Microsoft YaHei', sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #e0f7fa 0%, #bbdefb 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            color: #333;
        }
        
        .container {
            width: 100%;
            max-width: 800px;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        header {
            background: linear-gradient(90deg, #4fc3f7 0%, #29b6f6 100%);
            color: white;
            padding: 20px;
            text-align: center;
        }
        
        h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 16px;
            opacity: 0.9;
        }
        
        .tabs {
            display: flex;
            background: #e1f5fe;
            border-bottom: 1px solid #b3e5fc;
        }
        
        .tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
            color: #0288d1;
        }
        
        .tab.active {
            background: #4fc3f7;
            color: white;
        }
        
        .tab:hover:not(.active) {
            background: #b3e5fc;
        }
        
        .content {
            padding: 30px;
            min-height: 400px;
        }
        
        .page {
            display: none;
            animation: fadeIn 0.5s;
        }
        
        .page.active {
            display: block;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* 呼吸练习样式 */
        .breath-container {
            text-align: center;
        }
        
        .breath-circle {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            background: #e1f5fe;
            margin: 30px auto;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .breath-text {
            font-size: 24px;
            font-weight: bold;
            color: #0288d1;
            z-index: 2;
        }
        
        .pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: #4fc3f7;
            opacity: 0.3;
            transform: scale(0);
            animation: none;
        }
        
        .pulse.inhale {
            animation: pulseIn 4s infinite;
        }
        
        .pulse.exhale {
            animation: pulseOut 4s infinite;
        }
        
        @keyframes pulseIn {
            0% { transform: scale(0); opacity: 0.3; }
            50% { transform: scale(1); opacity: 0.1; }
            100% { transform: scale(1); opacity: 0; }
        }
        
        @keyframes pulseOut {
            0% { transform: scale(1); opacity: 0.1; }
            50% { transform: scale(0); opacity: 0.3; }
            100% { transform: scale(0); opacity: 0; }
        }
        
        .breath-controls {
            margin-top: 20px;
        }
        
        button {
            background: #0288d1;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
            margin: 0 10px;
        }
        
        button:hover {
            background: #01579b;
            transform: translateY(-2px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }
        
        button:disabled {
            background: #b3e5fc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        /* 情绪日记样式 */
        .mood-selector {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
        }
        
        .mood-option {
            text-align: center;
            cursor: pointer;
            padding: 10px;
            border-radius: 10px;
            transition: all 0.3s;
        }
        
        .mood-option:hover {
            background: #e1f5fe;
        }
        
        .mood-option.active {
            background: #b3e5fc;
            transform: scale(1.1);
        }
        
        .mood-emoji {
            font-size: 40px;
            margin-bottom: 5px;
        }
        
        textarea {
            width: 100%;
            height: 120px;
            padding: 15px;
            border: 1px solid #b3e5fc;
            border-radius: 10px;
            resize: none;
            font-size: 16px;
            margin: 15px 0;
        }
        
        /* 解压游戏样式 */
        .bubble-container {
            position: relative;
            height: 300px;
            border: 2px dashed #b3e5fc;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px 0;
            background: linear-gradient(to bottom, #e3f2fd 0%, #f3e5f5 100%);
        }
        
        .bubble {
            position: absolute;
            border-radius: 50%;
            cursor: pointer;
            transition: transform 0.2s;
            box-shadow: inset 0 -5px 10px rgba(255, 255, 255, 0.5), 
                        0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .bubble:hover {
            transform: scale(1.1);
        }
        
        .bubble::after {
            content: '';
            position: absolute;
            top: 20%;
            left: 20%;
            width: 15%;
            height: 15%;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 50%;
        }
        
        .stats {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
            font-size: 18px;
        }
        
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>心灵绿洲</h1>
            <div class="subtitle">大学生心理减压与正念练习空间</div>
        </header>
        
        <div class="tabs">
            <div class="tab active" data-tab="breath">正念呼吸</div>
            <div class="tab" data-tab="mood">情绪日记</div>
            <div class="tab" data-tab="game">解压泡泡</div>
           
        </div>
        
        <div class="content">
            <!-- 正念呼吸页面 -->
            <div class="page active" id="breath-page">
                <div class="breath-container">
                    <h2>正念呼吸练习</h2>
                    <p>跟随动画进行深呼吸，放松身心</p>
                    
                    <div class="breath-circle">
                        <div class="breath-text" id="breath-instruction">吸气</div>
                        <div class="pulse" id="pulse"></div>
                    </div>
                    
                    <div class="breath-controls">
                        <button id="start-breath">开始练习</button>
                        <button id="pause-breath" disabled>暂停</button>
                        <button id="reset-breath">重置</button>
                    </div>
                    
                    <div class="mindful-tip">
                        <p>提示：尝试将注意力完全集中在呼吸上，感受空气进入和离开身体的感觉。</p>
                    </div>
                </div>
            </div>
            
            <!-- 情绪日记页面 -->
            <div class="page" id="mood-page">
                <h2>情绪日记</h2>
                <p>记录你当下的情绪状态</p>
                
                <div class="mood-selector">
                    <div class="mood-option" data-mood="happy">
                        <div class="mood-emoji">😊</div>
                        <div>开心</div>
                    </div>
                    <div class="mood-option" data-mood="calm">
                        <div class="mood-emoji">😌</div>
                        <div>平静</div>
                    </div>
                    <div class="mood-option" data-mood="sad">
                        <div class="mood-emoji">😔</div>
                        <div>难过</div>
                    </div>
                    <div class="mood-option" data-mood="anxious">
                        <div class="mood-emoji">😰</div>
                        <div>焦虑</div>
                    </div>
                    <div class="mood-option" data-mood="angry">
                        <div class="mood-emoji">😠</div>
                        <div>生气</div>
                    </div>
                </div>
                
                <textarea id="mood-text" placeholder="可以在这里记录让你产生这种情绪的事情，或者任何你想表达的想法..."></textarea>
                
                <button id="save-mood">保存记录</button>
                
                <div class="history-list" id="mood-history">
                    <h3>情绪记录历史</h3>
                    <div id="history-items"></div>
                </div>
            </div>
            
            <!-- 解压游戏页面 -->
            <div class="page" id="game-page">
                <h2>解压泡泡</h2>
                <p>点击泡泡释放压力，享受即时的满足感</p>
                
                <div class="bubble-container" id="bubble-container">
                    <!-- 泡泡将通过JS动态生成 -->
                </div>
                
                <div class="stats">
                    <div>已点击: <span id="bubbles-popped">0</span> 个泡泡</div>
                    <div>剩余: <span id="bubbles-left">20</span> 个泡泡</div>
                </div>
                
                <button id="reset-bubbles">重新开始</button>
                <button id="toggle-movement">暂停浮动</button>
            </div>
    <script>
        // 标签页切换功能
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                // 移除所有活跃状态
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
                
                // 添加当前活跃状态
                tab.classList.add('active');
                const tabId = tab.getAttribute('data-tab');
                document.getElementById(`${tabId}-page`).classList.add('active');
            });
        });
        
        // 正念呼吸功能
        const breathText = document.getElementById('breath-instruction');
        const pulse = document.getElementById('pulse');
        const startBtn = document.getElementById('start-breath');
        const pauseBtn = document.getElementById('pause-breath');
        const resetBtn = document.getElementById('reset-breath');
        
        let breathInterval;
        let isBreathing = false;
        let isInhale = true;
        let breathCounter = 0;
        
        startBtn.addEventListener('click', startBreathing);
        pauseBtn.addEventListener('click', pauseBreathing);
        resetBtn.addEventListener('click', resetBreathing);
        
        function startBreathing() {
            if (isBreathing) return;
            
            isBreathing = true;
            startBtn.disabled = true;
            pauseBtn.disabled = false;
            
            breathText.textContent = "吸气";
            pulse.classList.add('inhale');
            pulse.classList.remove('exhale');
            
            breathInterval = setInterval(() => {
                if (isInhale) {
                    breathText.textContent = "呼气";
                    pulse.classList.remove('inhale');
                    pulse.classList.add('exhale');
                    isInhale = false;
                } else {
                    breathText.textContent = "吸气";
                    pulse.classList.remove('exhale');
                    pulse.classList.add('inhale');
                    isInhale = true;
                    breathCounter++;
                    
                    // 每4次呼吸显示鼓励信息
                    if (breathCounter % 4 === 0) {
                        showTemporaryMessage("做得很好！继续关注你的呼吸。");
                    }
                }
            }, 4000);
        }
        
        function pauseBreathing() {
            isBreathing = false;
            startBtn.disabled = false;
            pauseBtn.disabled = true;
            clearInterval(breathInterval);
            pulse.classList.remove('inhale', 'exhale');
            breathText.textContent = "已暂停";
        }
        
        function resetBreathing() {
            pauseBreathing();
            breathCounter = 0;
            isInhale = true;
            breathText.textContent = "吸气";
            pulse.classList.remove('inhale', 'exhale');
        }
        
        // 情绪日记功能
        const moodOptions = document.querySelectorAll('.mood-option');
        const moodText = document.getElementById('mood-text');
        const saveMoodBtn = document.getElementById('save-mood');
        const historyItems = document.getElementById('history-items');
        
        let selectedMood = '';
        let moodHistory = JSON.parse(localStorage.getItem('moodHistory')) || [];
        
        moodOptions.forEach(option => {
            option.addEventListener('click', () => {
                moodOptions.forEach(o => o.classList.remove('active'));
                option.classList.add('active');
                selectedMood = option.getAttribute('data-mood');
            });
        });
        
        saveMoodBtn.addEventListener('click', saveMood);
        
        function saveMood() {
            if (!selectedMood) {
                alert('请先选择一种情绪');
                return;
            }
            
            const moodEntry = {
                mood: selectedMood,
                text: moodText.value,
                date: new Date().toLocaleString()
            };
            
            moodHistory.unshift(moodEntry);
            localStorage.setItem('moodHistory', JSON.stringify(moodHistory));
            
            updateMoodHistory();
            moodText.value = '';
            moodOptions.forEach(o => o.classList.remove('active'));
            selectedMood = '';
            
            showTemporaryMessage('情绪记录已保存！');
        }
        
        function updateMoodHistory() {
            historyItems.innerHTML = '';
            
            if (moodHistory.length === 0) {
                historyItems.innerHTML = '<p>还没有情绪记录</p>';
                return;
            }
            
            moodHistory.forEach(entry => {
                const emojiMap = {
                    'happy': '😊',
                    'calm': '😌',
                    'sad': '😔',
                    'anxious': '😰',
                    'angry': '😠'
                };
                
                const item = document.createElement('div');
                item.className = 'history-item';
                item.innerHTML = `
                    <div style="display: flex; justify-content: space-between;">
                        <span>${emojiMap[entry.mood]} ${entry.date}</span>
                    </div>
                    <div style="margin-top: 5px; color: #666;">${entry.text || '无额外记录'}</div>
                `;
                historyItems.appendChild(item);
            });
        }
        
        // 初始化时更新情绪历史
        updateMoodHistory();
        
        // 解压泡泡游戏 - 增强版
        const bubbleContainer = document.getElementById('bubble-container');
        const bubblesPopped = document.getElementById('bubbles-popped');
        const bubblesLeft = document.getElementById('bubbles-left');
        const resetBubblesBtn = document.getElementById('reset-bubbles');
        const toggleMovementBtn = document.getElementById('toggle-movement');
        
        let poppedCount = 0;
        let totalBubbles = 20;
        let bubbles = [];
        let isMoving = true;
        let animationId;
        
        // 添加浮动控制按钮事件
        toggleMovementBtn.addEventListener('click', toggleBubbleMovement);
        resetBubblesBtn.addEventListener('click', initBubbles);
        
        function toggleBubbleMovement() {
            isMoving = !isMoving;
            toggleMovementBtn.textContent = isMoving ? '暂停浮动' : '开始浮动';
            
            if (isMoving) {
                startBubbleMovement();
            } else {
                cancelAnimationFrame(animationId);
            }
        }
        
        function createBubble() {
            const bubble = document.createElement('div');
            bubble.className = 'bubble';
            
            const size = Math.floor(Math.random() * 60) + 30;
            const colors = [
                'rgba(79, 195, 247, 0.7)', 
                'rgba(129, 212, 250, 0.7)', 
                'rgba(41, 182, 246, 0.7)', 
                'rgba(3, 169, 244, 0.7)', 
                'rgba(2, 136, 209, 0.7)'
            ];
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            // 随机初始位置
            const left = Math.random() * (bubbleContainer.offsetWidth - size);
            const top = Math.random() * (bubbleContainer.offsetHeight - size);
            
            bubble.style.width = `${size}px`;
            bubble.style.height = `${size}px`;
            bubble.style.background = color;
            bubble.style.left = `${left}px`;
            bubble.style.top = `${top}px`;
            
            // 为每个泡泡添加随机运动参数
            const bubbleData = {
                element: bubble,
                x: left,
                y: top,
                vx: (Math.random() - 0.5) * 2, // 随机水平速度
                vy: (Math.random() - 0.5) * 2, // 随机垂直速度
                size: size,
                amplitude: Math.random() * 2 + 1, // 波动幅度
                frequency: Math.random() * 0.02 + 0.01, // 波动频率
                time: Math.random() * 100 // 初始时间偏移
            };
            
            bubble.addEventListener('click', () => {
                // 泡泡爆炸效果
                bubble.style.transition = 'all 0.2s';
                bubble.style.transform = 'scale(1.5)';
                bubble.style.opacity = '0';
                
                setTimeout(() => {
                    // 从bubbles数组中移除
                    bubbles = bubbles.filter(b => b.element !== bubble);
                    bubble.remove();
                    poppedCount++;
                    bubblesPopped.textContent = poppedCount;
                    bubblesLeft.textContent = totalBubbles - poppedCount;
                    
                    // 播放泡泡音效（模拟）
                    const popSound = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQAAAAAAA');
                    popSound.volume = 0.1;
                    popSound.play().catch(e => console.log("Audio play failed:", e));
                    
                    // 如果所有泡泡都被点击了，创建新一批
                    if (poppedCount >= totalBubbles) {
                        setTimeout(initBubbles, 1000);
                    }
                }, 200);
            });
            
            bubbleContainer.appendChild(bubble);
            bubbles.push(bubbleData);
        }
        
        function updateBubblePositions() {
            bubbles.forEach(bubble => {
                bubble.time += 0.05;
                
                // 使用正弦波创建自然浮动效果
                const waveOffset = Math.sin(bubble.time * bubble.frequency) * bubble.amplitude;
                
                // 更新位置
                bubble.x += bubble.vx;
                bubble.y += bubble.vy + waveOffset;
                
                // 边界检测 - 碰到边界时反弹
                if (bubble.x <= 0 || bubble.x >= bubbleContainer.offsetWidth - bubble.size) {
                    bubble.vx *= -1;
                    bubble.x = Math.max(0, Math.min(bubble.x, bubbleContainer.offsetWidth - bubble.size));
                }
                
                if (bubble.y <= 0 || bubble.y >= bubbleContainer.offsetHeight - bubble.size) {
                    bubble.vy *= -1;
                    bubble.y = Math.max(0, Math.min(bubble.y, bubbleContainer.offsetHeight - bubble.size));
                }
                
                // 应用新位置
                bubble.element.style.left = `${bubble.x}px`;
                bubble.element.style.top = `${bubble.y}px`;
            });
        }
        
        function animateBubbles() {
            if (isMoving) {
                updateBubblePositions();
                animationId = requestAnimationFrame(animateBubbles);
            }
        }
        
        function startBubbleMovement() {
            if (isMoving) {
                animateBubbles();
            }
        }
        
        function initBubbles() {
            // 清空容器和泡泡数组
            bubbleContainer.innerHTML = '';
            bubbles = [];
            poppedCount = 0;
            bubblesPopped.textContent = '0';
            bubblesLeft.textContent = totalBubbles;
            
            // 创建新泡泡
            for (let i = 0; i < totalBubbles; i++) {
                createBubble();
            }
            
            // 开始动画
            if (isMoving) {
                startBubbleMovement();
            }
        }
        
        // 初始化泡泡游戏
        initBubbles();
        
        // 添加CSS动画
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeInOut {
                0% { opacity: 0; transform: translateY(-20px); }
                20% { opacity: 1; transform: translateY(0); }
                80% { opacity: 1; transform: translateY(0); }
                100% { opacity: 0; transform: translateY(-20px); }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
